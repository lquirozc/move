import { Component, OnInit, Input } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { SessionService } from 'src/app/services/session.service';
import { ApiService } from 'src/app/services/api.service';
import { DialogService } from 'src/app/services/dialog.service';
import { DatatableDataValues } from 'src/app/components/shared/custom-datatable/custom-datatable.component';
import { Subject } from 'rxjs';
import { CustomDatatableService } from 'src/app/components/shared/custom-datatable/custom-datatable.module';
import { BsLocaleService } from 'ngx-bootstrap/datepicker';

@Component({
  selector: 'app-resolution-invoicings',
  templateUrl: './resolution-invoicings.component.html',
  styleUrls: ['./resolution-invoicings.component.scss']
})
export class ResolutionInvoicingsComponent implements OnInit {

  searcherText: any;

  registerForm: FormGroup;
  userData: any;
  submittedForm: boolean = false;
  JSONdata: Array<any> = [];
  JSONdataPais: Array<any> = [];
  dataValues: Array<DatatableDataValues> = [
    { id: 'idResolucion', header: 'ID' },
    { id: 'descripcion', header: 'Descripción' },
    { id: 'numeroResolucion', header: 'N° de resolución' },
    { id: 'prefijo', header: 'Prefijo' },
    { id: 'nombrePais', header: 'País' },
  ];
  bsOptions: any = { dateInputFormat: 'DD/MM/YYYY', minDate: new Date() };

  constructor(private formBuilder: FormBuilder,
    private session: SessionService,
    private api: ApiService,
    private dialog: DialogService,
    private dtService: CustomDatatableService,
    private localeService: BsLocaleService) {
    this.userData = this.session.getUserData();
    this.localeService.use('es');
  }

  getData() {

    this.api.HttpGet(`api/ResolucionesFacturacion`).subscribe(res => {

      this.JSONdata = res as Array<any>;
      this.getDataPais();

    }, err => {
      console.log(err);
      this.JSONdata = [];
    });
  }

  getDataPais() {
    this.api.HttpGet(`api/Paises`).subscribe(res => {
      let data = res as Array<any>;
      this.JSONdataPais = data.filter(x => x.estado == true);
    }, err => {
      console.log(err);
      this.JSONdataPais = [];

    });
  }

  getItem(id) {

    this.api.HttpGet(`api/ResolucionesFacturacion/${id}`).subscribe(res => {

      this.registerForm.setValue({
        idResolucion: res['idResolucion'],
        idPais: res['idPais'],
        descripcion: (res['descripcion'] ? res['descripcion'] : ''),
        numeroResolucion: (res['numeroResolucion'] ? res['numeroResolucion'] : ''),
        numeroDesde: (res['numeroDesde'] ? res['numeroDesde'] : 0),
        numeroHasta: (res['numeroHasta'] ? res['numeroHasta'] : 0),
        fechaDesde: (res['fechaDesde'] ? (new Date(res['fechaDesde'])) : new Date()),
        fechaHasta: (res['fechaHasta'] ? (new Date(res['fechaHasta'])) : new Date()),
        numeroActual: (res['numeroActual'] ? res['numeroActual'] : 0),
        incluyeIVA: (res['incluyeIVA'] ? res['incluyeIVA'] : false),
        porcentajeIVA: (res['porcentajeIVA'] ? res['porcentajeIVA'] : ''),
        regimen: (res['regimen'] ? res['regimen'] : ''),
        prefijo: (res['prefijo'] ? res['prefijo'] : ''),
        estado: (res['estado'] ? res['estado'] : false),
        usuarioCreacion: this.userData.userId,
        usuarioModificacion: this.userData.userId
      });

    });
  }

  changeState(id) {

    // this.isNew = false;

    this.api.HttpGet(`api/ResolucionesFacturacion/${id}`).subscribe(res => {

      this.registerForm.setValue({
        idResolucion: res['idResolucion'],
        idPais: res['idPais'],
        descripcion: (res['descripcion'] ? res['descripcion'] : ''),
        numeroResolucion: (res['numeroResolucion'] ? res['numeroResolucion'] : ''),
        numeroDesde: (res['numeroDesde'] ? res['numeroDesde'] : 0),
        numeroHasta: (res['numeroHasta'] ? res['numeroHasta'] : 0),
        fechaDesde: (res['fechaDesde'] ? (new Date(res['fechaDesde'])) : new Date()),
        fechaHasta: (res['fechaHasta'] ? (new Date(res['fechaHasta'])) : new Date()),
        numeroActual: (res['numeroActual'] ? res['numeroActual'] : 0),
        incluyeIVA: (res['incluyeIVA'] ? res['incluyeIVA'] : false),
        porcentajeIVA: (res['porcentajeIVA'] ? res['porcentajeIVA'] : ''),
        regimen: (res['regimen'] ? res['regimen'] : ''),
        prefijo: (res['prefijo'] ? res['prefijo'] : ''),
        estado: (res['estado'] ? res['estado'] : false),
        usuarioCreacion: this.userData.userId,
        usuarioModificacion: this.userData.userId
      });

      this.registerForm.get('estado').setValue(!this.registerForm.get('estado').value);
      // this.JSONdata[index].estado = !this.JSONdata[index].estado;
      this.onSubmit();
    });
  }

  onSubmit() {

    this.submittedForm = true;

    if (this.registerForm.invalid) {
      this.dialog.openDialog('warning', 'Debes diligenciar los campos obligatiorios');
      return;

    } else {

      if (this.registerForm.get('incluyeIVA').value) {

        if (this.registerForm.get('porcentajeIVA').value == "") {
          this.dialog.openDialog('warning', 'Debes diligenciar los campos obligatiorios');
          return;
        }
      }

      let data = this.registerForm.value;
      if (this.dtService.isNew$.getValue()) {

        this.api.HttpPost(`api/ResolucionesFacturacion`, data).subscribe(res => {
          this.dialog.openDialog('success', 'Guardado con éxito');
          this.clearForm();
        });

      } else {

        this.api.HttpPut(`api/ResolucionesFacturacion/${data.idResolucion}`, data).subscribe(res => {
          this.dialog.openDialog('success', 'Guardado con éxito');
          this.clearForm();
        });

      }
    }
  }

  onChangeIncluyeIVA(event) {

    let isChecked = event.target.checked;
    if (isChecked) {
      this.registerForm.get('porcentajeIVA').enable();
    }
    else {
      this.registerForm.get('porcentajeIVA').disable();
      this.registerForm.get('porcentajeIVA').setValue('');
    }

  }

  ngOnInit(): void {

    this.initForms();
    this.getData();
  }

  get f() { return this.registerForm.controls; }

  initForms() {
    this.registerForm = this.formBuilder.group({
      idResolucion: null,
      idPais: ['', Validators.required],
      descripcion: ['', Validators.required],
      numeroResolucion: ['', Validators.required],
      numeroDesde: ['', Validators.required],
      numeroHasta: ['', Validators.required],
      fechaDesde: [new Date(), Validators.required],
      fechaHasta: [new Date(), Validators.required],
      numeroActual: ['', Validators.required],
      incluyeIVA: false,
      porcentajeIVA: '',
      regimen: ['', Validators.required],
      prefijo: '',
      estado: true,
      usuarioCreacion: this.userData.userId,
      usuarioModificacion: this.userData.userId
    });
  }

  clearForm() {
    this.cancelForm();
    this.getData();

  }

  cancelForm() {
    this.dtService.reset();
    this.submittedForm = false;
    this.registerForm.reset();
    this.initForms();
  }

}
